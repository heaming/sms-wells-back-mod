package com.kyowon.sms.wells.web.contract.salesstatus.rest;

import static com.kyowon.sms.wells.web.contract.salesstatus.dto.WcteSecProductDto.*;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import com.kyowon.sms.wells.web.contract.salesstatus.dto.WcteSecProductDto;
import com.kyowon.sms.wells.web.contract.salesstatus.dvo.WcteSecNistlDvo;
import com.kyowon.sms.wells.web.contract.salesstatus.dvo.WcteValidateListDvo;
import com.kyowon.sms.wells.web.contract.salesstatus.service.WcteSecProductService;
import com.kyowon.sms.wells.web.contract.zcommon.constants.CtContractConst;
import com.sds.sflex.common.common.dto.ExcelUploadDto;
import com.sds.sflex.common.common.dvo.ExcelMetaDvo;
import com.sds.sflex.common.common.service.ExcelReadService;
import com.sds.sflex.system.config.core.service.MessageResourceService;
import com.sds.sflex.system.config.datasource.PageInfo;
import com.sds.sflex.system.config.datasource.PagingResult;
import com.sds.sflex.system.config.response.SaveResponse;
import com.sds.sflex.system.config.validation.BizAssert;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.RequiredArgsConstructor;

@Api(tags = "[WCTE] 삼성전자 주문 정보 관리")
@Validated
@RequiredArgsConstructor
@RestController
@RequestMapping(CtContractConst.REST_URL_V1 + "/sales-status/sec-product-management")
public class WcteSecProductController {

    private final WcteSecProductService service;
    private final MessageResourceService messageResourceService;
    private final ExcelReadService excelReadService;

    @ApiOperation(value = "삼성전자 주문 정보 관리 페이징 조회", notes = "삼성전자 주문 정보 관리 페이징 조회")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "strtdt", value = "시작일", paramType = "query", required = true),
        @ApiImplicitParam(name = "enddt", value = "종료일", paramType = "query", required = true),
        @ApiImplicitParam(name = "sellTpCd", value = "판매유형", paramType = "query"),
    })
    @GetMapping("/reservation-days/paging")
    public PagingResult<SearchReservationRes> getReservationPages(
        @Valid
        WcteSecProductDto.SearchReservationReq dto,
        @Valid
        PageInfo pageInfo
    ) {
        return service.getReservationPages(dto, pageInfo);
    }

    @ApiOperation(value = "삼성전자 주문 정보 관리 엑셀 다운로드", notes = "삼성전자 주문 정보 관리 엑셀 다운로드")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "strtdt", value = "시작일", paramType = "query", required = true),
        @ApiImplicitParam(name = "enddt", value = "종료일", paramType = "query", required = true),
        @ApiImplicitParam(name = "sellTpCd", value = "판매유형", paramType = "query"),
    })
    @GetMapping("/reservation-days")
    public List<SearchReservationRes> getReservationsForExcelDownload(
        @Valid
        WcteSecProductDto.SearchReservationReq dto
    ) {
        return service.getReservationsForExcelDownload(dto);
    }

    @ApiOperation(value = "확정일 페이징 조회", notes = "generated by LT")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "strtdt", value = "시작일", paramType = "query", required = true),
        @ApiImplicitParam(name = "enddt", value = "종료일", paramType = "query", required = true),
        @ApiImplicitParam(name = "sellTpCd", value = "판매유형", paramType = "query"),
        @ApiImplicitParam(name = "sppBzsOrdId", value = "삼성주문번호", paramType = "query"),
        @ApiImplicitParam(name = "pdctIdno", value = "시리얼넘버", paramType = "query"),
    })
    @GetMapping("/confirm-days/paging")
    public PagingResult<SearchConfirmRes> getConfirmPages(
        @Valid
        SearchConfirmReq dto,
        @Valid
        PageInfo pageInfo
    ) {
        return service.getConfirmPages(dto, pageInfo);
    }

    @ApiOperation(value = "확정일 엑셀 다운로드", notes = "generated by LT")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "strtdt", value = "시작일", paramType = "query", required = true),
        @ApiImplicitParam(name = "enddt", value = "종료일", paramType = "query", required = true),
        @ApiImplicitParam(name = "sellTpCd", value = "판매유형", paramType = "query"),
        @ApiImplicitParam(name = "sppBzsOrdId", value = "삼성주문번호", paramType = "query"),
        @ApiImplicitParam(name = "pdctIdno", value = "시리얼넘버", paramType = "query"),
    })
    @GetMapping("/confirm-days")
    public List<SearchConfirmRes> getConfirms(
        @Valid
        SearchConfirmReq dto
    ) {
        return service.getConfirms(dto);
    }

    @ApiOperation(value = "확정일 다건 저장", notes = "확정일 엑셀 업로드")
    @PostMapping("/confirm-days/excel-upload")
    public SaveResponse createConfirms(
        @RequestBody
        @Valid
        List<CreateConfirmReq> list
    ) {
        return SaveResponse.builder().processCount(service.createConfirms(list)).build();
    }

    @ApiOperation(value = "NotInstalled 페이징 조회", notes = "generated by LT")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "strtdt", value = "시작일", paramType = "query", required = true),
        @ApiImplicitParam(name = "enddt", value = "종료일", paramType = "query", required = true),
        @ApiImplicitParam(name = "sellTpCd", value = "판매유형", paramType = "query"),
        @ApiImplicitParam(name = "sppBzsOrdId", value = "삼성주문번호", paramType = "query"),
        @ApiImplicitParam(name = "pdctIdno", value = "시리얼넘버", paramType = "query"),
    })
    @GetMapping("/not-installs/paging")
    public PagingResult<SearchNotInstalledRes> getNotInstalledPages(
        @Valid
        SearchNotInstalledReq dto,
        @Valid
        PageInfo pageInfo
    ) {
        return service.getNotInstalledPages(dto, pageInfo);
    }

    @ApiOperation(value = "NotInstalled 페이징 조회", notes = "generated by LT")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "strtdt", value = "시작일", paramType = "query", required = true),
        @ApiImplicitParam(name = "enddt", value = "종료일", paramType = "query", required = true),
        @ApiImplicitParam(name = "sellTpCd", value = "판매유형", paramType = "query"),
        @ApiImplicitParam(name = "sppBzsOrdId", value = "삼성주문번호", paramType = "query"),
        @ApiImplicitParam(name = "pdctIdno", value = "시리얼넘버", paramType = "query"),
    })
    @PostMapping("/not-installs/excel-upload")
    public ExcelUploadDto.UploadRes createNotInstalledExcelUpload(
        @RequestParam("file")
        MultipartFile file
    ) throws Exception {
        Map<String, String> headerTitle = new LinkedHashMap<>();
        headerTitle.put("cntrNo", messageResourceService.getMessage("계약번호"));
        headerTitle.put("cntrSn", messageResourceService.getMessage("계약일련번호"));
        headerTitle.put("canRson", messageResourceService.getMessage("미설치사유"));

        List<WcteSecNistlDvo> excelData = excelReadService
            .readExcel(file, new ExcelMetaDvo(1, headerTitle), WcteSecNistlDvo.class);
        WcteValidateListDvo<WcteSecNistlDvo> validation = service.validateNotInstalledIzs(excelData);
        if (!validation.isValid()) {
            return ExcelUploadDto.UploadRes.builder()
                .status(CtContractConst.EXCEL_UPLOAD_ERROR)
                .excelData(excelData)
                .errorInfo(validation.getErrList())
                .build();
        }
        int processCount = service.createNotInstalledIzs(validation.getCleansingList());
        BizAssert.isTrue(processCount == validation.getCleansingList().size(), "MSG_ALT_SVE_ERR");
        return ExcelUploadDto.UploadRes.builder()
            .status(CtContractConst.EXCEL_UPLOAD_SUCCESS)
            .build();
    }

    @ApiOperation(value = "중분류 된 삼성전자 상품 목록 조회", notes = "중분류 된 삼성전자 상품 목록 조회")
    @GetMapping("/medium-clsfs")
    public List<SearchSecPdBycfRes> getSecPdBycfs() {
        return service.getSecPdBycfs();
    }

    @ApiOperation(value = "Shipping 페이징 조회", notes = "generated by LT, for Shipping, dto modifier: Shipping")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "strtdt", value = "시작일", paramType = "query", required = true),
        @ApiImplicitParam(name = "enddt", value = "종료일", paramType = "query", required = true),
        @ApiImplicitParam(name = "pdMclsfIds", value = "상품중분류ID목록", paramType = "query"),
        @ApiImplicitParam(name = "basePdCds", value = "상품ID목록", paramType = "query"),
        @ApiImplicitParam(name = "isCombi", value = "콤비여부", paramType = "query"),
    })
    @GetMapping("/shipping-items/paging")
    public PagingResult<SearchShippingRes> getShippingPages(
        @Valid
        SearchShippingReq dto,
        @Valid
        PageInfo pageInfo
    ) {
        return service.getShippingPages(dto, pageInfo);
    }

    @ApiOperation(value = "Shipping 다건 조회", notes = "generated by LT, for Shipping, dto modifier: Shipping")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "strtdt", value = "시작일", paramType = "query", required = true),
        @ApiImplicitParam(name = "enddt", value = "종료일", paramType = "query", required = true),
        @ApiImplicitParam(name = "pdMclsfIds", value = "상품중분류ID목록", paramType = "query"),
        @ApiImplicitParam(name = "basePdCds", value = "상품ID목록", paramType = "query"),
        @ApiImplicitParam(name = "isCombi", value = "콤비여부", paramType = "query"),
    })
    @GetMapping("/shipping-items")
    public List<SearchShippingRes> getShippings(
        @Valid
        SearchShippingReq dto
    ) {
        return service.getShippings(dto);
    }

    @ApiOperation(value = "Free A/S 페이징 조회", notes = "generated by LT, for Free A/S, dto modifier: FreeAS")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "cntrCnfmStrtdt", value = "cntrCnfmStrtdt", paramType = "query"),
        @ApiImplicitParam(name = "cntrCnfmEnddt", value = "cntrCnfmEnddt", paramType = "query"),
        @ApiImplicitParam(name = "istStrtdt", value = "istStrtdt", paramType = "query"),
        @ApiImplicitParam(name = "istEnddt", value = "istEnddt", paramType = "query"),
        @ApiImplicitParam(name = "cntrDtlStatCd", value = "cntrDtlStatCd", paramType = "query"),
        @ApiImplicitParam(name = "cntrNo", value = "cntrNo", paramType = "query"),
        @ApiImplicitParam(name = "cntrSn", value = "cntrSn", paramType = "query"),
        @ApiImplicitParam(name = "cntrCstKnm", value = "cntrCstKnm", paramType = "query"),
        @ApiImplicitParam(name = "pdCd", value = "pdCd", paramType = "query"),
        @ApiImplicitParam(name = "pdNm", value = "pdNm", paramType = "query"),
        @ApiImplicitParam(name = "pdctIdno", value = "pdctIdno", paramType = "query"),
        @ApiImplicitParam(name = "slStpYn", value = "slStpYn", paramType = "query"),
        @ApiImplicitParam(name = "afterTgYn", value = "afterTgYn", paramType = "query"),
        @ApiImplicitParam(name = "afterTgBaseYm", value = "afterTgBaseYm", paramType = "query"),
    })
    @GetMapping("/free-after-services/paging")
    public PagingResult<SearchFreeAsRes> getFreeASPages(
        @Valid
        SearchFreeAsReq dto,
        @Valid
        PageInfo pageInfo
    ) {
        return service.getFreeASPages(dto, pageInfo);
    }

    @ApiOperation(value = "Free A/S 다건 조회", notes = "generated by LT, for Free A/S, dto modifier: FreeAs")
    @ApiImplicitParams(value = {
        @ApiImplicitParam(name = "cntrCnfmStrtdt", value = "cntrCnfmStrtdt", paramType = "query"),
        @ApiImplicitParam(name = "cntrCnfmEnddt", value = "cntrCnfmEnddt", paramType = "query"),
        @ApiImplicitParam(name = "istStrtdt", value = "istStrtdt", paramType = "query"),
        @ApiImplicitParam(name = "istEnddt", value = "istEnddt", paramType = "query"),
        @ApiImplicitParam(name = "cntrDtlStatCd", value = "cntrDtlStatCd", paramType = "query"),
        @ApiImplicitParam(name = "cntrNo", value = "cntrNo", paramType = "query"),
        @ApiImplicitParam(name = "cntrSn", value = "cntrSn", paramType = "query"),
        @ApiImplicitParam(name = "cntrCstKnm", value = "cntrCstKnm", paramType = "query"),
        @ApiImplicitParam(name = "pdCd", value = "pdCd", paramType = "query"),
        @ApiImplicitParam(name = "pdNm", value = "pdNm", paramType = "query"),
        @ApiImplicitParam(name = "pdctIdno", value = "pdctIdno", paramType = "query"),
        @ApiImplicitParam(name = "slStpYn", value = "slStpYn", paramType = "query"),
        @ApiImplicitParam(name = "afterTgYn", value = "afterTgYn", paramType = "query"),
        @ApiImplicitParam(name = "afterTgBaseYm", value = "afterTgBaseYm", paramType = "query"),
    })
    @GetMapping("/free-after-services")
    public List<SearchFreeAsRes> getFreeASs(
        @Valid
        SearchFreeAsReq dto
    ) {
        return service.getFreeASs(dto);
    }
}
